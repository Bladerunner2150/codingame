import java.util.*
import java.io.*
import java.math.*

/**
 * Don't let the machines win. You are humanity's last hope...
 **/
fun main(args : Array<String>) {
    val input = Scanner(System.`in`)
    val width = input.nextInt() // the number of cells on the X axis
    val height = input.nextInt() // the number of cells on the Y axis

    System.err.println("Width = $width")
    System.err.println("Height = $height")

    val array2d: MutableList<MutableList<String>> = mutableListOf()

    if (input.hasNextLine()) {
        input.nextLine()
    }

    for (i in 0 until height) {
        val line = input.nextLine() // width characters, each either 0 or .

        System.err.println("Adding line to array: $line")

        val charArray = mutableListOf<String>()

        for (char in line) {
            charArray.add(char.toString())
        }

        array2d.add(charArray)
    }

    for ((rowIndex, row) in array2d.withIndex()) {
        System.err.println(row)

        for ((nodeIndex, node) in row.withIndex()) {
            val nodeExists = node == "0"

            System.err.println("Node exists at current position $nodeIndex: $nodeExists")

            var rightNodeX = -1
            var rightNodeY = -1
            var bottomNodeX = -1
            var bottomNodeY = -1

            if (nodeExists) {
                for (adj in nodeIndex + 1 until row.size) {
                    val adjacentNodeExists = row[adj] == "0"

                    if (adjacentNodeExists) {
                        rightNodeX = adj
                        rightNodeY = rowIndex
                        break
                    }
                }

                for (bot in rowIndex + 1 until array2d.size) {
                    val bottomNodeExists = array2d[bot][nodeIndex] == "0"

                    if (bottomNodeExists) {
                        bottomNodeX = nodeIndex
                        bottomNodeY = bot
                        break
                    }
                }

                println("$nodeIndex $rowIndex $rightNodeX $rightNodeY $bottomNodeX $bottomNodeY")
            }
        }
    }
}